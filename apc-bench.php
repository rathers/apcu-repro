<?php

$limit = 10000;
$key   = "i-love-apc";
$blob  = "Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)Alternative PHP Cache is a free, open source (PHP license) framework that heavily optimizes and tunes the output of the PHP bytecode compiler and stores the final, compiled result in shared memory. This bytecode optimization leads to faster runtime execution since source files do not need to be recompiled. Its second, even more important job is maintaining a shared, in-memory bytecode cache which allows your server to re-use the compiled code rather than having to retrieve the opcodes from a disk cache, thus giving you an even bigger performance boost. Compiled files remain in the shared cache provided there is enough memory allocated. You can configure whether files on disk are checked each time to see if they should be re-cached or are only checked if they are missing from the cache using ini settings. For a heavy application consisting of a large source code base such as Drupal, you can expect around a 3x increase in page generation speed[1] as a result. It was once the optimization framework of choice at Facebook and is extremely well suited to accelerating heavy PHP applications thanks to its mature codebase and numerous contributors (including Facebook itself).[2] It also provides a few extra functions beyond its bytecode optimization and bytecode caching, such as giving your PHP applications the ability to store and retrieve keyed data in a global 'data store' housed in shared memory, thereby allowing you to cache and significantly speed up access to very commonly used data without having to constantly go to disk or SQL backends. Zeev Suraski and Andi Gutmans (two of the creators of PHP and the Zend Engine) originally scheduled it for inclusion in the PHP core no later than PHP 6 or earlier.[3] While multiple accelerator projects were considered desirable[4] the official focus moved to Optimizer Plus[5][6] which is included in the core distribution as of PHP 5.5. Since March 2013 a beta version of APCu is available where all opcode caching abilities have been removed.[7] Website: http://pecl.php.net/package/APC PHP version: works with all PHP versions up to PHP 5.4 (3.1.13 - beta release) Latest beta version: 3.1.13 (2012-09-03) Latest stable version: 3.1.9 (2011-05-14)
Status: Actively maintained (different releases stable/beta)
Download link: http://pecl.php.net/package/APC (source code, required for up-to-date compilation)
Official installation help: http://php.net/apc.setup and http://php.net/apc.installation (extension must be compiled against the sources of the PHP version it is to be used with; includes instructions for building on Windows)
Pre-built Windows binaries (USE AT YOUR OWN RISK, OUTDATED AND MAY BE INCOMPATIBLE): It is always best to compile the extension yourself, but some people provide pre-built versions as a courtesy. The problem is that these versions quickly go out of date. Version 3.1.13-beta (2012-09-03) pre-compiled binaries for Windows (for PHP x86 v5.4.4, 5.4.6, 5.4.7 or 5.4.8): http://www.dragffy.com/posts/php-apc-windows. Version 3.1.10-beta (2012-04-11) pre-compiled binaries for Windows (for PHP x86? v5.3 or 5.4 threaded & non-threaded builds): http://downloads.php.net/pierre/ (also provides some other PECL extensions previously available on pecl4win)";


for ($i=0; $i < $limit; $i++) {

    $success = apc_store($key, $blob);
    if (!$success) {
        status($i, 'w', $success);
        continue;
    }
    $outBlob = apc_fetch($key, $success);
    status($i, 'r', $success);
}
echo "finito\n";
function status($iter, $rw, $success) {
    if ($success ) return;
    $status = $success ? 'worked' : 'BORKED!';
    echo "Iteration $iter/$rw $status\n";
}
